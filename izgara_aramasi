#!/usr/bin/env python3
# -*- coding: utf-8 -*-


#1. kutuphaneler
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# veri kümesi
dataset = pd.read_csv('Social_Network_Ads.csv')
X = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values

# eğitim ve test kümelerinin bölünmesi
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

# Ölçekleme
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# SVM
from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf', random_state = 0)
classifier.fit(X_train, y_train)

# Tahminler
y_pred = classifier.predict(X_test)

#  Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

print(cm)


#k-katlamali capraz dogrulama 
from sklearn.model_selection import cross_val_score
''' 
1. estimator : classifier (bizim durum)
2. X
3. Y
4. cv : kaç katlamalı

'''
basari = cross_val_score(estimator = classifier, X=X_train, y=y_train , cv = 4)
print(basari.mean())
print(basari.std())



# parametremetre optimizasyonu ve algoritma seçimi
from sklearn.model_selection import GridSearchCV
#burda cv dedik çünkü biz cross validationda kullacağız bunu öğrendik zaten.
#ama dilersek cv kullanmadan yapabiliriz. 
#burda classifier değişkenimizin içindeki değeleri optimize edeceğiz. 
#parametlerimizi p değişkenimizin içinde verelim. ve bunu bir listeye alalım. ve bu listenin içinede
#sözlük yapısında kullanacağız 

p = [{'C':[1,2,3,4,5],'kernel':['linear']},
     {'C':[1,2,3,4,5] ,'kernel':['rbf'], # bu tanımladığımız caselerin hepsini deneyecek. 
      'gamma':[1,0.5,0.1,0.01,0.001]} ]
#c ye 1 2 3 4 5 verecek sonra bunların hepsini linear e sokacak. 
'''
GSCV parametreleri
estimator : sınıflandırma algoritması (neyi optimize etmek istediğimiz)
param_grid : parametreler/ yani algoritmada denenecek parametreler
scoring: neye göre skorlanacak : örn : accuracy
cv : kaç katlamalı olacağı
n_jobs : aynı anda çalışacak iş
'''
#gs diye değişken oluşturuyorum. ve parametlerini ctrl i ile görebiliriz. 	
gs = GridSearchCV(estimator= classifier, #SVM algoritması
                  param_grid = p,
                  scoring =  'accuracy',
                  cv = 10,
                  n_jobs = -1) #default değer 

grid_search = gs.fit(X_train,y_train) #eğitiyoruz. svmin üzerinde çalışan bir eğitim bu. üst akıl. 
eniyisonuc = grid_search.best_score_ #sonuç neydi bizim için başarıydı. 
#bu parametleri deneyip en iyi başarıyı bize verecek. 
eniyiparametreler = grid_search.best_params_ 
#buda en iyi parametleri verecek. 

print(eniyisonuc)
print(eniyiparametreler)

#temelde burda amacımız algoritmayı optimize etmek. 










